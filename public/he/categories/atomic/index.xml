<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atomic on Michael Shalitin</title>
    <link>https://smichaelshal.github.io/he/categories/atomic/</link>
    <description>Recent content in Atomic on Michael Shalitin</description>
    <generator>Hugo</generator>
    <language>he</language>
    <lastBuildDate>Sun, 01 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://smichaelshal.github.io/he/categories/atomic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>x86 Lock</title>
      <link>https://smichaelshal.github.io/he/posts/atomic/x86-lock/</link>
      <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/atomic/x86-lock/</guid>
      <description>&lt;h2 id=&#34;lock-prefix&#34;&gt;lock prefix&lt;/h2&gt;&#xA;&lt;p&gt;ה-lock prefix הוא קידומת של של ה-opcode (הקידומת היא &lt;code&gt;0xF0&lt;/code&gt;) והוא מאפשר לבצע פעולות אטומיות.&lt;/p&gt;&#xA;&lt;p&gt;ה-lock prefix גורמת לאות &lt;code&gt;LOCK#&lt;/code&gt; של המעבד להישאר פעיל במהלך ביצוע ההוראה המצורפת אליה, מה שהופך את ההוראה לאטומית. בסביבה עם ריבוי מעבדים, האות &lt;code&gt;LOCK#&lt;/code&gt; מבטיח שהמעבד המחזיק באות יש שימוש בלעדי בכל זיכרון משותף בזמן שהאות פעיל.&lt;/p&gt;&#xA;&lt;p&gt;ניתן להוסיף את קידומת &lt;code&gt;LOCK&lt;/code&gt; רק לקבוצה מסוימת של הוראות, ורק במקרים שבהם אופרנד היעד של ההוראה הוא אופרנד זיכרון. הוראות מסוימות שניתן להוסיף להן את קידומת &lt;code&gt;LOCK&lt;/code&gt; כוללות:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exclusive</title>
      <link>https://smichaelshal.github.io/he/posts/atomic/exclusive/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/atomic/exclusive/</guid>
      <description>&lt;h2 id=&#34;load-lockstore-conditional-llsc&#34;&gt;Load Lock/Store Conditional (LL/SC)&lt;/h2&gt;&#xA;&lt;h3 id=&#34;load-lockstore-conditional&#34;&gt;Load-Lock/Store-Conditional&lt;/h3&gt;&#xA;&lt;p&gt;ה-Load-Lock ו-Store-Conditional נקרא גם Load-Link/Store-Conditional הן צמד הוראות המשמשות ב-multithreading כדי להשיג סנכרון בין thread-ים.&lt;/p&gt;&#xA;&lt;p&gt;ההוראה Load-Lock (או בקיצור LL) משמשת לקרוא את הערך הנוכחי במיקום זיכרון,  ההוראה רושמת באופן פנימי (למשל ב-arm המידע נשמר ב- exclusive monitors) את מיקום הזיכרון לצורך גישה בלעדית, בעוד שההוראה Store-Conditional (או בקיצור SC) נועדה לשמור ערך חדש באותו מיקום זיכרון, אך רק אם לא התרחשו שינויים באותו מיקום זיכרון מאז ההוראת ה-LL התואמת הקודמת.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Atomic</title>
      <link>https://smichaelshal.github.io/he/posts/atomic/atomic/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/atomic/atomic/</guid>
      <description>&lt;h2 id=&#34;מבוא&#34;&gt;מבוא&lt;/h2&gt;&#xA;&lt;p&gt;כאשר מספר thread-ים מנסים לשנות בו-זמנית את אותו מיקום בזיכרון, המעבדים אינם מבטיחים תוצאה ספציפית כלשהי כתוצאה מהפעולה.&lt;/p&gt;&#xA;&lt;p&gt;כשאנחנו אומרים שעדכון מסוג RMW, כמו למשל &lt;code&gt;atomic_inc(&amp;amp;x)&lt;/code&gt;, הוא אטומי, הכוונה היא לכך שמיקום הזיכרון (במקרה הזה, &lt;code&gt;x&lt;/code&gt;) לא ישתנה בין שלבי הקריאה והכתיבה שמרכיבים את הפעולה האטומית. במילים אחרות, אם שני מעבדים מבצעים את &lt;code&gt;atomic_inc(&amp;amp;x)&lt;/code&gt; במקביל, יש לוודא שהערך הסופי של &lt;code&gt;x&lt;/code&gt; יהיה הערך ההתחלתי בתוספת 2.&#xA;אין מצב שבו ניתן יהיה לקבל רצף אירועים כזה:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
