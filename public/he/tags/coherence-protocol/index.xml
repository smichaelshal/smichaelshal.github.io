<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coherence-Protocol on Michael Shalitin</title>
    <link>https://smichaelshal.github.io/he/tags/coherence-protocol/</link>
    <description>Recent content in Coherence-Protocol on Michael Shalitin</description>
    <generator>Hugo</generator>
    <language>he</language>
    <lastBuildDate>Sun, 03 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://smichaelshal.github.io/he/tags/coherence-protocol/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AMBA ACE Barrier</title>
      <link>https://smichaelshal.github.io/he/posts/barriers/amba-ace-barrier/</link>
      <pubDate>Sun, 03 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/barriers/amba-ace-barrier/</guid>
      <description>&lt;h3 id=&#34;טרנזקציות-מחסום-בפרוטוקול-ace&#34;&gt;טרנזקציות מחסום בפרוטוקול ACE&lt;/h3&gt;&#xA;&lt;p&gt;פרוטוקול ACE תומך בטרנזקציות מחסום אשר משמשות להבטחת סדר והבחנה של טרנזקציות במערכת. המחסומים מסייעים ביצירת יחסי סדר בין פעולות, כדי להבטיח ביצועים ותאימות צפויה בין רכיבי המערכת.&lt;/p&gt;&#xA;&lt;p&gt;לצורך שימוש בטרנזקציות מחסום, רכיב מאסטר משתמש במאפייני דומיין השיתוף כדי להגדיר עם אילו רכיבים אחרים יש צורך לסנכרן את המחסום וכדי להקים יחסי סדר מוגדרים. הגדרת הדומיין של טרנזקציית המחסום מגדירה את מידת הפצת המחסום במערכת, ואילו מאפייני המחסום עצמם מכתיבים את יחסי הסדר הנדרשים.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multi-copy atomicity</title>
      <link>https://smichaelshal.github.io/he/posts/cache/multi-copy-atomicity/</link>
      <pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/multi-copy-atomicity/</guid>
      <description>&lt;h2 id=&#34;דרישת-אטומיות&#34;&gt;דרישת אטומיות&lt;/h2&gt;&#xA;&lt;p&gt;שמירה ב-cache של נתונים משותפים מהווה אופטימיזציה חשובה שמסייעת להפחית את זמן השהייה של גישות לזיכרון במערכות זיכרון משותף. אולם, שמירה ב-cache יוצרת מספר עותקים של נתונים בצמתים שונים ברשת, והצורך לשמור על עדכניות העותקים הללו בכל כתיבה יכול להוות אתגר. קיימת האפשרות לבטל את העותקים הישנים או לעדכן אותם לערך החדש. אך הפצת העותקים והשוני במסלולי הרשת מקשים על ביטול או עדכון של העותקים בצורה אטומית.&lt;/p&gt;&#xA;&lt;p&gt;לרוב יש פתרונות אפקטיביים לדרישת אטומיות עבור מערכות המשתמשות ב-invalidating. פתרונות למערכות המשתמשות ב-updating נוטים להיות מסובכים ובלתי יעילים לעומת הפתרונות ל-invalidating.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache maintenance</title>
      <link>https://smichaelshal.github.io/he/posts/cache/cache-maintenance/</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/cache-maintenance/</guid>
      <description>&lt;h2 id=&#34;תחזוקת-cache-בתוכנה&#34;&gt;תחזוקת cache בתוכנה&lt;/h2&gt;&#xA;&lt;p&gt;לעיתים יש צורך בתוכנה לבצע פעולות ניקוי או ביטול של ה-cache. פעולות אלו נדרשות כאשר תוכן הזיכרון החיצוני השתנה, ויש צורך להבטיח שה-cache אינו מכיל נתונים מיושנים. פעולות אלו יכולות להיות נדרשות גם לאחר שינויים הקשורים ל-MMU כמו שינוי הרשאות גישה, מדיניות cache, מיפוי כתובות וירטואליות לכתובת פיזית, או כאשר ה-I-caches ו-D-caches חייבים להיות מסונכרנים לקוד שנוצר באופן דינמי, כגון ב-JIT-compilers וטועני ספריות דינמיות.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ביטול (Invalidation) של cache או cache line: פעולה זו כוללת ניקוי של ה-cache מנתונים ללא כתיבה לרמה הבאה או לזיכרון הראשי על ידי ביטול של cache line אחת או יותר. משמעות הדבר היא שה-cache מסומן כ-invalid, ולכן תוכן השורות אינו מוגדר. אפשר לראות זאת כדרך להסיר שינויים בתחום הזיכרון מה-cache, כך שהנתונים המחודשים מהזיכרון החיצוני יכנסו ל-cache בצורה נכונה.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Snoop &amp; Directory</title>
      <link>https://smichaelshal.github.io/he/posts/cache/snoop--directory/</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/snoop--directory/</guid>
      <description>&lt;h2 id=&#34;פרוטוקול-snooping&#34;&gt;פרוטוקול Snooping&lt;/h2&gt;&#xA;&lt;p&gt;מנגנון Snooping הוא מנגנון שבו כל אחד מה-cache-ים במערכת עוקב אחרי שורות כתובת מסוימות כדי לזהות אם שורות זיכרון ששמורות ב-cache שלו נגישות או משתנות על ידי מעבדים אחרים. פרוטוקולי קוהרנטיות כמו פרוטוקולי invalidate ופרוטוקולי update משתמשים במנגנון זה.&lt;/p&gt;&#xA;&lt;p&gt;פרוטוקול snooping מתבסס על bus משותף שמחבר בין כל ה-cache-ים לבין הזיכרון הראשי. כאשר מעבד מבצע כתיבה ל-cache שלו, הוא משדר את הכתובת של הבלוק שעבר שינוי אל ה-bus. מעבדים אחרים שברשותם עותק של אותו הבלוק ב-cache יכולים לבחור לבטל את העותק או לעדכן אותו, תלוי בגרסת הפרוטוקול שנמצאת בשימוש פרוטוקול מבוסס invalidate או מבוסס update). היתרון העיקרי של פרוטוקול זה הוא הפשטות והמהירות שלו, אך הוא מגיע עם מספר חסרונות:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache coherence</title>
      <link>https://smichaelshal.github.io/he/posts/cache/cache-coherence/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/cache-coherence/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;מבוא-לקוהרנטיות&#34;&gt;מבוא לקוהרנטיות&lt;/h2&gt;&#xA;&lt;p&gt;בעיית קוהרנטיות יכולה להתרחש כאשר מספר גורמים (כמו מספר ליבות) מנסים לגשת לנתון מסוים שיש לו מספר עותקים (למשל, עותקים שונים ב-cache-ים) ולפחות אחת הגישות היא כתיבה. כדי למנוע גישה לנתונים מיושנים (שגורמת לחוסר קוהרנטיות) נעשה שימוש בפרוטוקול קוהרנטיות.&lt;/p&gt;&#xA;&lt;p&gt;חוסר קוהרנטיות נגרם בעיקר בשל נוכחותם של מספר מעבדים עם גישה ל-cache-ים ולזיכרון. במערכות מודרניות, מעבדים אלו כוללים ליבות מעבד, מנועי DMA  והתקנים חיצוניים, אשר יכולים לקרוא ולכתוב לזיכרון ולפחות לחלקם יש cache.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AMBA CHI</title>
      <link>https://smichaelshal.github.io/he/posts/cache/coherence-protocol/amba-chi/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/coherence-protocol/amba-chi/</guid>
      <description>&lt;h3 id=&#34;מהו-amba&#34;&gt;מהו AMBA?&lt;/h3&gt;&#xA;&lt;p&gt;פרוטוקול AMBA (קיצור של Advanced Microcontroller Bus Architecture) הוא פרוטוקול שפותח על ידי ARM ומיועד לסטנדרטיזציה של התקשורת בין רכיבי חומרה שונים במערכות SoC. משפחת פרוטוקולים זו מכסה מגוון רחב של היבטים בתכנון המערכת, כולל טופולוגיית bus, בוררות (arbitration) בין רכיבים המבקשים גישה למשאבים משותפים, ניהול signaling, תכנון interconnect, ניהול צריכת חשמל ואבטחה. הפרוטוקול AMBA כולל מספר מפרטים שונים שמותאמים לצרכים מגוונים של טרנזקציות וסוכנים במערכת, כולל AHB, APB, AXI, ACE ו-CHI. כל אחד מפרוטוקולים אלו מתמקד בהיבט מסוים של התקשורת בין רכיבי המערכת.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache</title>
      <link>https://smichaelshal.github.io/he/posts/cache/cache/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/cache/</guid>
      <description>&lt;h2 id=&#34;מבוא&#34;&gt;מבוא&lt;/h2&gt;&#xA;&lt;p&gt;זיכרון RAM מהיר כמו ליבות המעבד המודרניות יקר בהרבה לעומת זיכרון DRAM הקונבנציונלי. העלויות הגבוהות של זיכרון מהיר נוטות להיות מנוטרלות על ידי התקורות הכרוכות בניהול המשאבים. לכן, במקום להפוך את ה-SRAM למשאב שנשלט על ידי מערכת ההפעלה או המשתמש, הוא מנוהל ישירות על ידי המעבד, והשימוש בו שקוף למערכת.&lt;/p&gt;&#xA;&lt;p&gt;במקרה כזה, ה-SRAM משמש כזיכרון cache, כלומר, כמאגר זמני עבור נתונים מהזיכרון הראשי, אשר סביר להניח שיעשה בהם שימוש בקרוב על ידי המעבד. הדבר מתאפשר בזכות העובדה שהקוד והנתונים של תוכנה נוטים להפגין מקומיות זמנית ומרחבית.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invalidate queue</title>
      <link>https://smichaelshal.github.io/he/posts/processor-components/invalidate-queue/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/processor-components/invalidate-queue/</guid>
      <description>&lt;h2 id=&#34;מבוא&#34;&gt;מבוא&lt;/h2&gt;&#xA;&lt;p&gt;בפרוטוקולי קוהרנטיות מסוג Invalidate קיימים מספר סוגי הודעות ובניהם הודעות Invalidate פשוטות:&lt;/p&gt;&#xA;&lt;p&gt;הודעות Invalidate:&#xA;הודעת invalidate כוללת את הכתובת הפיזית של שורת ה-cache שיש לבטל את תוקפה. כל מעבד אחר במערכת מחויב להסיר את הנתונים הרלוונטיים מה-cache שלו ולהגיב בהתאם.&lt;/p&gt;&#xA;&lt;p&gt;הודעות Invalidate Acknowledge:&#xA;כאשר מעבד מקבל הודעת invalidate, הוא חייב להשיב בהודעת invalidate acknowledge לאחר שהסיר את הנתונים שצוינו מה-cache שלו.&lt;/p&gt;&#xA;&lt;p&gt;במערכות מחשוב מתקדמות, קיימים מבנים פנימיים כמו ה-store buffer, שתפקידם לאגור באופן זמני את המידע המיועד לכתיבה בזיכרון הראשי. עם זאת, מגבלות בגודל ה-store buffer מחייבות את המעבד לנהל בקפידה את השימוש בו. כאשר המעבד מבצע רצף פעולות כתיבה (stores), במיוחד אם כל אחת מהן גורמת ל-cache miss, ה-store buffer עלול להתמלא במהירות. ברגע שה-buffer מתמלא, המעבד חייב להמתין לסיום תהליך ה-invalidations, שבמהלכו מבטלים שורות cache ישנות כדי לרוקן את ה-buffer ולאפשר המשך ביצוע. מצב זה עלול להתרחש גם לאחר הפעלת מחסום זיכרון, כאשר כל פעולות ה-store הבאות תלויות בהשלמת תהליך ה-invalidations, גם אם אין החמצת cache.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Line fill buffer</title>
      <link>https://smichaelshal.github.io/he/posts/processor-components/line-fill-buffer/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/processor-components/line-fill-buffer/</guid>
      <description>&lt;p&gt;כשהנתונים שנכתבים לכתובת באזור זיכרון Write-Back ה-stores נמצאים ב-store buffer, הם נשארים שם עד שה-store מבצע פרישה. לאחר הפרישה, הנתונים נכתבים ל-L1 Data Cache אם השורה קיימת ויש לה הרשאת כתיבה. אם לא, ה-Line Fill Buffer (LFB) מוקצה לטיפול בכתיבה במקרה של store miss. ה-LFB מקבל בסופו של דבר את העותק העדכני של שורת ה-cache, כך שניתן להתקין אותה ב-L1 Data Cache ולבצע את הכתיבה של נתוני ה-store ל-cache. פרטים נוספים לגבי מיזוג, buffering, סדרי עדיפויות ו&amp;quot;קיצורי דרך&amp;quot; אינם תמיד ברורים, אך אחת מהפרשנויות היא ש-LFBs פועלים כ-buffers בגודל cache, שבהם מתמזגים נתוני ה-store לפני שליחתם ל-L1 Data Cache.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MOESI</title>
      <link>https://smichaelshal.github.io/he/posts/cache/coherence-protocol/moesi/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/coherence-protocol/moesi/</guid>
      <description>&lt;p&gt;פרוטוקול MOESI הוא פרוטוקול קוהרנטיות cache ממשפחת פרוטוקולי MESI המבוסס Invalidate והוא נקרא על שם ה-stable state של ה-cache lines שהוא מאפשר. מטרתו היא לאפשר ניהול יעיל (יחסית) של ה-cache.&lt;/p&gt;&#xA;&lt;p&gt;הפרוטוקול משמש בעיקר ל-cache-ים עם גישות מורכבות יחסית כשצריך לנסות ליעל את הטרזקציות בצורה יעילה, למשל השימוש הנפוץ בו הוא ב-data cache, לעומת זאת ב-cache-ים אחרים כמו ה-instruction cache או ה-TLB משתמשים בפרוטוקולים יותר פשוטים.&lt;/p&gt;&#xA;&lt;h2 id=&#34;מצבי-cache-line&#34;&gt;מצבי Cache line&lt;/h2&gt;&#xA;&lt;h3 id=&#34;מצב-modified&#34;&gt;מצב Modified&lt;/h3&gt;&#xA;&lt;p&gt;ה-cache line הוא העותק היחיד שתקף, הוא בעל הרשאות לקריאה וכתיבה ויכול להיות שהמידע בו שונה מהזיכרון הראשי&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
