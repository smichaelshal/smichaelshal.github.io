<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lock on Michael Shalitin</title>
    <link>https://smichaelshal.github.io/he/tags/lock/</link>
    <description>Recent content in Lock on Michael Shalitin</description>
    <generator>Hugo</generator>
    <language>he</language>
    <lastBuildDate>Thu, 12 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://smichaelshal.github.io/he/tags/lock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LKMM Code Examples</title>
      <link>https://smichaelshal.github.io/he/posts/models/lkmm-code-examples/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/models/lkmm-code-examples/</guid>
      <description>&lt;h2 id=&#34;שימוש-במחסומי-זיכרון-עם-buffer-ים-מעגליים&#34;&gt;&#xA;  שימוש במחסומי זיכרון עם buffer-ים מעגליים&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%d7%a9%d7%99%d7%9e%d7%95%d7%a9-%d7%91%d7%9e%d7%97%d7%a1%d7%95%d7%9e%d7%99-%d7%96%d7%99%d7%9b%d7%a8%d7%95%d7%9f-%d7%a2%d7%9d-buffer-%d7%99%d7%9d-%d7%9e%d7%a2%d7%92%d7%9c%d7%99%d7%99%d7%9d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;שימוש במחסומי זיכרון בשילוב עם buffer-ים מעגליים מאפשר התמודדות עם בעיות סינכרון בצורה יעילה יותר, תוך הימנעות מהצורך במנגנונים כבדים כמו:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;המנעות מנעילה:&lt;/strong&gt; במקום להשתמש במנעול ששולט על שני הקצוות של ה-buffer (הקצה של הכתיבה והקצה של הקריאה), ניתן לאפשר גישה בו-זמנית לשני הצדדים. כך היצרן יכול להכניס נתונים ל-buffer בו זמנית עם הצרכן שמוציא נתונים ממנו, מבלי להשתמש במנעול.&lt;/p&gt;</description>
    </item>
    <item>
      <title>mb</title>
      <link>https://smichaelshal.github.io/he/posts/barriers/mb/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/barriers/mb/</guid>
      <description>&lt;h2 id=&#34;מבוא&#34;&gt;&#xA;  מבוא&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%d7%9e%d7%91%d7%95%d7%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;מחסום זיכרון הוא הוראה המיועדת לאכוף מגבלות סדר על פעולות זיכרון המבוצעות לפני ואחרי הוראת המחסום. זה מתבטא בכך שפעולות זיכרון שביצוען סודר לפני המחסום יבוצעו לפני כל פעולות זיכרון שניתן להן לאחר המחסום.&lt;/p&gt;&#xA;&lt;p&gt;חשיבות האכיפה שהמחסומים מספקים נובעת מהעובדה שמעבדים והתקנים אחרים במערכת עשויים לנצל מגוון טכניקות לשיפור ביצועים, כמו שינוי סדר ההוראות, דחייה ושילוב של פעולות זיכרון, ביצוע loads ספקולטיביות, חיזוי ספקולטיבי של branch-ים ושימוש בסוגים שונים של cache. מחסומי זיכרון נועדו לעקוף או לדכא את הטכניקות הללו או את השפעותיהם, כך שהקוד יכול לשלוט בצורה צפויה באינטראקציות בין מספר מעבדים או בין מעבד למכשירים.&lt;/p&gt;</description>
    </item>
    <item>
      <title>x86 Lock</title>
      <link>https://smichaelshal.github.io/he/posts/atomic/x86-lock/</link>
      <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/atomic/x86-lock/</guid>
      <description>&lt;h2 id=&#34;lock-prefix&#34;&gt;&#xA;  lock prefix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#lock-prefix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ה-lock prefix הוא קידומת של של ה-opcode (הקידומת היא &lt;code&gt;0xF0&lt;/code&gt;) והוא מאפשר לבצע פעולות אטומיות.&lt;/p&gt;&#xA;&lt;p&gt;ה-lock prefix גורמת לאות &lt;code&gt;LOCK#&lt;/code&gt; של המעבד להישאר פעיל במהלך ביצוע ההוראה המצורפת אליה, מה שהופך את ההוראה לאטומית. בסביבה עם ריבוי מעבדים, האות &lt;code&gt;LOCK#&lt;/code&gt; מבטיח שהמעבד המחזיק באות יש שימוש בלעדי בכל זיכרון משותף בזמן שהאות פעיל.&lt;/p&gt;&#xA;&lt;p&gt;ניתן להוסיף את קידומת &lt;code&gt;LOCK&lt;/code&gt; רק לקבוצה מסוימת של הוראות, ורק במקרים שבהם אופרנד היעד של ההוראה הוא אופרנד זיכרון. הוראות מסוימות שניתן להוסיף להן את קידומת &lt;code&gt;LOCK&lt;/code&gt; כוללות:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
