<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-Copy-Atomicity on Michael Shalitin</title>
    <link>https://smichaelshal.github.io/he/tags/multi-copy-atomicity/</link>
    <description>Recent content in Multi-Copy-Atomicity on Michael Shalitin</description>
    <generator>Hugo</generator>
    <language>he</language>
    <lastBuildDate>Sat, 21 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://smichaelshal.github.io/he/tags/multi-copy-atomicity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Causal &amp; Physics</title>
      <link>https://smichaelshal.github.io/he/posts/causal--physics/</link>
      <pubDate>Sat, 21 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/causal--physics/</guid>
      <description>&lt;h2 id=&#34;ראייה-מורכבת-יותר-של-זיכרון&#34;&gt;ראייה מורכבת יותר של זיכרון&lt;/h2&gt;&#xA;&lt;p&gt;מערכות מחשוב מודרניות מספקות אופטימיזציות וביצועים גבוהים אבל זה לא מגיע בחינם, כל אלה גורמים לסיבוך משמעותי, ולכן הרבה פעמים משתמשים בכלים שגורמים לכל הסיבוך הזה להיות שקוף כלפי המשתמש כמו שפות high level,  מנגנוני נעילה וכל מיני מנגנונים אחרים.&lt;/p&gt;&#xA;&lt;p&gt;בצורה הזאת אפשר לדמות שפות high level ומנגנוני נעילה למערכת שמתפקדת על פי עקרונות של פיזיקה ניוטונית: כשיש נעילה, המערכת מתנהגת בצורה דטרמיניסטית וצפויה, וניתן לדעת בוודאות מה יתרחש בכל מצב נתון. לעומת זאת, במעבר לרמות נמוכות יותר של ניהול זיכרון (למשל, ניהול זיכרון במערכות מרובות ליבות ללא נעילה), המצב מתחיל להזכיר את עקרונות הפיזיקה הקוונטית, שבהם אירועים מפתיעים יכולים להתרחש, וההבנה המלאה של התהליכים מורכבת יותר. רק מעטים יטענו שהם מבינים את כל ההתרחשויות בעולם הזה. אמנם לרוב ניתן לפעול היטב בסביבה זו מבלי להבין את הפרטים המורכבים, אך ישנם מקרים שבהם ידע מעמיק בתחום, נחוץ כדי להבין ולפתור בעיות מורכבות.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AMBA ACE Barrier</title>
      <link>https://smichaelshal.github.io/he/posts/barriers/amba-ace-barrier/</link>
      <pubDate>Sun, 03 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/barriers/amba-ace-barrier/</guid>
      <description>&lt;h3 id=&#34;טרנזקציות-מחסום-בפרוטוקול-ace&#34;&gt;טרנזקציות מחסום בפרוטוקול ACE&lt;/h3&gt;&#xA;&lt;p&gt;פרוטוקול ACE תומך בטרנזקציות מחסום אשר משמשות להבטחת סדר והבחנה של טרנזקציות במערכת. המחסומים מסייעים ביצירת יחסי סדר בין פעולות, כדי להבטיח ביצועים ותאימות צפויה בין רכיבי המערכת.&lt;/p&gt;&#xA;&lt;p&gt;לצורך שימוש בטרנזקציות מחסום, רכיב מאסטר משתמש במאפייני דומיין השיתוף כדי להגדיר עם אילו רכיבים אחרים יש צורך לסנכרן את המחסום וכדי להקים יחסי סדר מוגדרים. הגדרת הדומיין של טרנזקציית המחסום מגדירה את מידת הפצת המחסום במערכת, ואילו מאפייני המחסום עצמם מכתיבים את יחסי הסדר הנדרשים.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Acquire Release</title>
      <link>https://smichaelshal.github.io/he/posts/barriers/acquire-release/</link>
      <pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/barriers/acquire-release/</guid>
      <description>&lt;h1 id=&#34;מבוא&#34;&gt;מבוא&lt;/h1&gt;&#xA;&lt;p&gt;ההוראות מסוג load-acquire ו-store-release, כוללות מחסומים מובנים חד-כיווניים, המאפשרים דרישות סדר חלשות ממחסומים כלליים. הן משפיעות על הסדר של גישה לזיכרון מפורש שצוינו שנמצא בכל צד של הוראת מחסום הזיכרון. אופי זה מאפשר ביצועים משופרים בזכות אופטימיזציות מיקרו-ארכיטקטוניות ומצמצם את השפעת הביצועים לעומת מחסום זיכרון כללי.&lt;/p&gt;&#xA;&lt;p&gt;כאשר הסדר הנדרש נתמך על ידי load-acquire או store-release, מומלץ להשתמש בהן במקום במחסום כללי כדי לשפר את היעילות.&lt;/p&gt;&#xA;&lt;p&gt;סמנטיקות acquire ו-release הן מרכיבים חיוניים לאפשר העברת מידע מתואמת מ-thread אחד לאחר באופן אמין.&lt;/p&gt;</description>
    </item>
    <item>
      <title>mb</title>
      <link>https://smichaelshal.github.io/he/posts/barriers/mb/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/barriers/mb/</guid>
      <description>&lt;h2 id=&#34;מבוא&#34;&gt;מבוא&lt;/h2&gt;&#xA;&lt;p&gt;מחסום זיכרון הוא הוראה המיועדת לאכוף מגבלות סדר על פעולות זיכרון המבוצעות לפני ואחרי הוראת המחסום. זה מתבטא בכך שפעולות זיכרון שביצוען סודר לפני המחסום יבוצעו לפני כל פעולות זיכרון שניתן להן לאחר המחסום.&lt;/p&gt;&#xA;&lt;p&gt;חשיבות האכיפה שהמחסומים מספקים נובעת מהעובדה שמעבדים והתקנים אחרים במערכת עשויים לנצל מגוון טכניקות לשיפור ביצועים, כמו שינוי סדר ההוראות, דחייה ושילוב של פעולות זיכרון, ביצוע loads ספקולטיביות, חיזוי ספקולטיבי של branch-ים ושימוש בסוגים שונים של cache. מחסומי זיכרון נועדו לעקוף או לדכא את הטכניקות הללו או את השפעותיהם, כך שהקוד יכול לשלוט בצורה צפויה באינטראקציות בין מספר מעבדים או בין מעבד למכשירים.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multi-copy atomicity</title>
      <link>https://smichaelshal.github.io/he/posts/cache/multi-copy-atomicity/</link>
      <pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://smichaelshal.github.io/he/posts/cache/multi-copy-atomicity/</guid>
      <description>&lt;h2 id=&#34;דרישת-אטומיות&#34;&gt;דרישת אטומיות&lt;/h2&gt;&#xA;&lt;p&gt;שמירה ב-cache של נתונים משותפים מהווה אופטימיזציה חשובה שמסייעת להפחית את זמן השהייה של גישות לזיכרון במערכות זיכרון משותף. אולם, שמירה ב-cache יוצרת מספר עותקים של נתונים בצמתים שונים ברשת, והצורך לשמור על עדכניות העותקים הללו בכל כתיבה יכול להוות אתגר. קיימת האפשרות לבטל את העותקים הישנים או לעדכן אותם לערך החדש. אך הפצת העותקים והשוני במסלולי הרשת מקשים על ביטול או עדכון של העותקים בצורה אטומית.&lt;/p&gt;&#xA;&lt;p&gt;לרוב יש פתרונות אפקטיביים לדרישת אטומיות עבור מערכות המשתמשות ב-invalidating. פתרונות למערכות המשתמשות ב-updating נוטים להיות מסובכים ובלתי יעילים לעומת הפתרונות ל-invalidating.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
